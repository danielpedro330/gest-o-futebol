
// ===================
// Prisma Schema para Gestão de Partidas de Futebol
// ===================

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Usuários do sistema (admin, técnicos, etc)
model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  status    String   // ativo, inativo, etc
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamento futuro: pode ser dono de times, etc
  // teams Team[]

  @@map("users")
}

// Times de futebol
model Team {
  // Pontuação do time para ranking (atualize via lógica de negócio)
  points    Int      @default(0)
  id        String   @id @default(cuid())
  name      String
  logo      String   // URL da imagem
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Jogadores do time
  players   Player[]

  // Partidas em que o time é mandante ou visitante
  homeGames Match[] @relation("HomeTeam")
  awayGames Match[] @relation("AwayTeam")

  // Solicitações de partidas enviadas e recebidas
  matchRequestsSent     MatchRequest[] @relation("RequestFrom")
  matchRequestsReceived MatchRequest[] @relation("RequestTo")

  // Jogos internos (treinos)
  internalMatches InternalMatch[]


  // Relação N:N com MatchPlayer (escalação em partidas)
  matchPlayers MatchPlayer[]

  @@map("teams")
}

// Jogadores
model Player {
  id          String   @id @default(cuid())
  name        String
  position    String?
  shirtNumber Int
  IsCaptain   Boolean  @default(false)
  teamId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relação com time
  team        Team     @relation(fields: [teamId], references: [id])

  // Participação em jogos internos
  internalMatches InternalMatch[]

  // Participação em partidas oficiais
  matchPlayers MatchPlayer[]

  @@map("players")
}

// Partidas oficiais entre times
model Match {
  id          String   @id @default(cuid())
  date        DateTime
  location    String
  homeTeamId  String
  awayTeamId  String
  scoreHome   Int?
  scoreAway   Int?
  confirmed   Boolean  @default(false)
  status      String   @default("pending") // pending, accepted, finished, canceled
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relação com times
  homeTeam    Team     @relation("HomeTeam", fields: [homeTeamId], references: [id])
  awayTeam    Team     @relation("AwayTeam", fields: [awayTeamId], references: [id])

  // Escalação dos jogadores
  matchPlayers MatchPlayer[]

  @@map("matches")
}

// Relação N:N entre jogadores e partidas (escalação, gols, cartões, etc)
model MatchPlayer {
  id        String   @id @default(cuid())
  matchId   String
  playerId  String
  teamId    String
  goals     Int?    // Gols marcados
  yellowCards Int?  // Cartões amarelos
  redCards  Int?    // Cartões vermelhos

  match     Match   @relation(fields: [matchId], references: [id])
  player    Player  @relation(fields: [playerId], references: [id])
  team      Team    @relation(fields: [teamId], references: [id])

  @@map("match_players")
}

// Solicitação de partidas entre times
model MatchRequest {
  id        String   @id @default(cuid())
  fromTeamId String
  toTeamId   String
  status    String   @default("pending") // pending, accepted, rejected
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fromTeam  Team     @relation("RequestFrom", fields: [fromTeamId], references: [id])
  toTeam    Team     @relation("RequestTo", fields: [toTeamId], references: [id])

  @@map("match_requests")
}

// Jogos internos (treinos, amistosos internos)
model InternalMatch {
  id        String   @id @default(cuid())
  date      DateTime
  teamId    String
  score     Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relação com time
  team      Team     @relation(fields: [teamId], references: [id])

  // Jogadores participantes
  players   Player[]

  @@map("internal_matches")
}